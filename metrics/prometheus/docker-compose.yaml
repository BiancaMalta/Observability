version: '3.8'

services:

  ## Stack Métricas prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - 9090:9090
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=adatech
      - GF_SECURITY_ADMIN_PASSWORD=adatech@2233
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_METRICS_ENABLED=true
    restart: unless-stopped
    ports:
      - 3010:3000
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./config/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    ports:
      - 9093:9093
    networks:
      - monitoring

  nodeexporter:
    image: prom/node-exporter:latest
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/:/var/lib/docker:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host/root:ro
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro          
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitoring

  ## Stack Serviços App Voting
  frontend:
    container_name: frontend
    hostname: frontend
    restart: always
    image: devinfrabr/frontend:latest    
    environment:
      APP_PORT: 3000
      DATABASE_HOST: database
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: votes
    ports: 
      - "3002:3000"
    networks:
      - monitoring

  backend: 
    container_name: backend
    hostname: backend
    restart: always
    image: devinfrabr/backend:latest    
    environment:
      REDIS_HOST: redis
    ports:  
      - "8080:80"
    networks:
      - monitoring

  worker:
    container_name: worker
    hostname: worker
    restart: always
    image: devinfrabr/worker:latest    
    environment:
      DATABASE_HOST: database
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: votes
      REDIS_HOST: redis
    ports:  
      - "3001:3000"
    networks:
      - monitoring

  database:
    container_name: database
    hostname: database
    image: postgres:15-alpine
    restart: always
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres 
      POSTGRES_DB: votes
    volumes: 
      - "db-data:/var/lib/postgresql/data"
    ports: 
      - "5432:5432"
    networks:
      - monitoring

  redis: 
    container_name: redis 
    hostname: redis
    image: redis:alpine
    ports: 
      - "6379:6379"    
    networks:
      - monitoring      

  #seed: 
  #  container_name: seed
  #  hostname: seed
  #  image: devinfrabr/seed:latest
  #  links:
  #    - backend
  #  networks:
  #    - monitoring 

volumes:
    prometheus_data: {}
    grafana_data: {}      
    db-data: {}

networks:
  monitoring: